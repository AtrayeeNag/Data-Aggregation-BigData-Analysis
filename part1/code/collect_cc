{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 113,
   "metadata": {},
   "outputs": [],
   "source": [
    "import requests\n",
    "import argparse\n",
    "import time\n",
    "import json\n",
    "import StringIO\n",
    "import gzip\n",
    "import csv\n",
    "import codecs\n",
    "import pandas as pd\n",
    "import re\n",
    "\n",
    "from bs4 import BeautifulSoup"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[*] Trying target domain: https://techcrunch.com/2019/*\n",
      "[*] Added 3366 results.\n",
      "[*] Trying target domain: https://techcrunch.com/2018/*\n",
      "[*] Added 10607 results.\n",
      "[*] Found a total of 13973 hits.\n",
      "amazon::0:apple::0:google::0:facebook::0:uber::1\n",
      "amazon::0:apple::0:google::0:facebook::0:uber::2\n",
      "amazon::0:apple::0:google::0:facebook::0:uber::3\n",
      "amazon::0:apple::1:google::0:facebook::0:uber::3\n",
      "amazon::0:apple::1:google::0:facebook::0:uber::3\n",
      "amazon::20:apple::25:google::30:facebook::13:uber::8\n",
      "amazon::20:apple::25:google::30:facebook::13:uber::8\n",
      "amazon::20:apple::25:google::30:facebook::13:uber::8\n",
      "amazon::20:apple::25:google::30:facebook::13:uber::8\n",
      "amazon::20:apple::25:google::30:facebook::13:uber::8\n",
      "amazon::20:apple::25:google::30:facebook::13:uber::8\n",
      "amazon::20:apple::25:google::30:facebook::13:uber::8\n",
      "amazon::45:apple::40:google::60:facebook::26:uber::12\n",
      "amazon::45:apple::40:google::60:facebook::26:uber::12\n",
      "amazon::45:apple::40:google::60:facebook::26:uber::12\n",
      "amazon::45:apple::40:google::60:facebook::26:uber::12\n",
      "amazon::45:apple::40:google::60:facebook::26:uber::12\n",
      "amazon::45:apple::40:google::60:facebook::26:uber::12\n",
      "amazon::45:apple::40:google::60:facebook::26:uber::12\n",
      "amazon::46:apple::41:google::60:facebook::26:uber::13\n",
      "amazon::46:apple::41:google::60:facebook::26:uber::13\n",
      "amazon::46:apple::41:google::60:facebook::26:uber::13\n",
      "amazon::46:apple::41:google::60:facebook::26:uber::13\n",
      "amazon::69:apple::56:google::90:facebook::46:uber::24\n",
      "amazon::69:apple::56:google::90:facebook::46:uber::24\n",
      "amazon::69:apple::57:google::90:facebook::47:uber::25\n",
      "amazon::69:apple::57:google::90:facebook::47:uber::25\n",
      "amazon::84:apple::85:google::120:facebook::66:uber::29\n",
      "amazon::97:apple::107:google::150:facebook::93:uber::33\n",
      "amazon::98:apple::107:google::150:facebook::93:uber::33\n",
      "amazon::99:apple::107:google::150:facebook::93:uber::33\n",
      "amazon::120:apple::132:google::180:facebook::123:uber::45\n",
      "amazon::120:apple::132:google::180:facebook::123:uber::45\n",
      "amazon::120:apple::132:google::180:facebook::123:uber::45\n",
      "amazon::120:apple::132:google::180:facebook::123:uber::45\n",
      "amazon::120:apple::132:google::180:facebook::123:uber::45\n",
      "amazon::120:apple::132:google::180:facebook::123:uber::45\n",
      "amazon::120:apple::132:google::180:facebook::123:uber::45\n",
      "amazon::120:apple::132:google::180:facebook::123:uber::45\n",
      "amazon::120:apple::132:google::180:facebook::123:uber::45\n",
      "amazon::120:apple::132:google::180:facebook::123:uber::45\n",
      "amazon::120:apple::132:google::180:facebook::123:uber::46\n",
      "amazon::120:apple::132:google::180:facebook::123:uber::46\n",
      "amazon::120:apple::132:google::180:facebook::123:uber::46\n",
      "amazon::120:apple::132:google::180:facebook::123:uber::46\n",
      "amazon::120:apple::132:google::180:facebook::123:uber::46\n",
      "amazon::120:apple::132:google::180:facebook::123:uber::46\n",
      "amazon::120:apple::132:google::180:facebook::123:uber::46\n",
      "amazon::120:apple::132:google::180:facebook::123:uber::46\n",
      "amazon::121:apple::132:google::180:facebook::123:uber::46\n",
      "amazon::122:apple::132:google::180:facebook::123:uber::46\n",
      "amazon::141:apple::158:google::210:facebook::148:uber::54\n",
      "amazon::166:apple::177:google::240:facebook::157:uber::84\n",
      "amazon::166:apple::177:google::240:facebook::157:uber::84\n",
      "amazon::166:apple::177:google::240:facebook::158:uber::84\n",
      "amazon::166:apple::177:google::240:facebook::159:uber::84\n",
      "amazon::166:apple::177:google::240:facebook::159:uber::84\n",
      "amazon::166:apple::177:google::240:facebook::159:uber::84\n",
      "amazon::166:apple::177:google::240:facebook::159:uber::84\n",
      "amazon::166:apple::177:google::240:facebook::159:uber::84\n",
      "amazon::166:apple::177:google::240:facebook::159:uber::84\n",
      "amazon::166:apple::178:google::240:facebook::159:uber::84\n",
      "amazon::166:apple::178:google::240:facebook::159:uber::84\n",
      "amazon::166:apple::178:google::240:facebook::159:uber::84\n",
      "amazon::166:apple::178:google::240:facebook::159:uber::84\n",
      "amazon::166:apple::178:google::240:facebook::159:uber::84\n",
      "amazon::166:apple::178:google::240:facebook::159:uber::84\n",
      "amazon::166:apple::178:google::240:facebook::159:uber::84\n",
      "amazon::166:apple::178:google::240:facebook::159:uber::84\n",
      "amazon::166:apple::179:google::240:facebook::159:uber::84\n",
      "amazon::166:apple::180:google::240:facebook::159:uber::84\n",
      "amazon::166:apple::180:google::240:facebook::159:uber::84\n",
      "amazon::166:apple::180:google::240:facebook::159:uber::84\n",
      "amazon::166:apple::181:google::240:facebook::159:uber::84\n",
      "amazon::172:apple::200:google::270:facebook::176:uber::94\n",
      "amazon::179:apple::213:google::300:facebook::191:uber::108\n",
      "amazon::179:apple::214:google::300:facebook::191:uber::108\n",
      "amazon::179:apple::215:google::300:facebook::191:uber::108\n",
      "amazon::179:apple::215:google::300:facebook::191:uber::108\n",
      "amazon::179:apple::215:google::300:facebook::191:uber::108\n",
      "amazon::179:apple::215:google::300:facebook::191:uber::108\n",
      "amazon::213:apple::240:google::330:facebook::209:uber::117\n",
      "amazon::213:apple::240:google::330:facebook::209:uber::117\n",
      "amazon::213:apple::240:google::330:facebook::209:uber::117\n",
      "amazon::213:apple::240:google::330:facebook::209:uber::117\n",
      "amazon::213:apple::241:google::330:facebook::209:uber::117\n",
      "amazon::213:apple::241:google::330:facebook::209:uber::117\n",
      "amazon::213:apple::241:google::330:facebook::209:uber::117\n",
      "amazon::213:apple::241:google::330:facebook::210:uber::117\n",
      "amazon::214:apple::241:google::330:facebook::210:uber::117\n",
      "amazon::215:apple::241:google::330:facebook::210:uber::117\n",
      "amazon::216:apple::241:google::330:facebook::210:uber::117\n",
      "amazon::216:apple::241:google::330:facebook::210:uber::117\n",
      "amazon::216:apple::241:google::330:facebook::210:uber::117\n",
      "amazon::216:apple::241:google::330:facebook::210:uber::117\n",
      "amazon::216:apple::241:google::330:facebook::210:uber::118\n",
      "amazon::216:apple::241:google::330:facebook::210:uber::119\n",
      "amazon::216:apple::241:google::330:facebook::210:uber::120\n",
      "amazon::233:apple::256:google::360:facebook::234:uber::147\n",
      "amazon::255:apple::277:google::390:facebook::263:uber::169\n",
      "amazon::255:apple::277:google::390:facebook::263:uber::169\n",
      "amazon::283:apple::299:google::420:facebook::284:uber::184\n",
      "amazon::308:apple::328:google::450:facebook::310:uber::191\n",
      "amazon::331:apple::345:google::480:facebook::335:uber::207\n",
      "amazon::350:apple::372:google::510:facebook::360:uber::208\n",
      "amazon::351:apple::386:google::540:facebook::383:uber::222\n",
      "amazon::356:apple::421:google::570:facebook::417:uber::233\n",
      "amazon::356:apple::421:google::570:facebook::418:uber::233\n",
      "amazon::356:apple::421:google::570:facebook::419:uber::233\n",
      "amazon::356:apple::421:google::570:facebook::420:uber::233\n",
      "amazon::356:apple::421:google::570:facebook::421:uber::233\n",
      "amazon::356:apple::421:google::570:facebook::422:uber::233\n",
      "amazon::356:apple::421:google::570:facebook::423:uber::233\n",
      "amazon::356:apple::421:google::570:facebook::424:uber::233\n",
      "amazon::356:apple::421:google::570:facebook::424:uber::233\n",
      "amazon::356:apple::421:google::570:facebook::424:uber::233\n",
      "amazon::356:apple::421:google::570:facebook::424:uber::233\n",
      "amazon::356:apple::421:google::570:facebook::424:uber::233\n",
      "amazon::356:apple::421:google::570:facebook::424:uber::233\n",
      "amazon::356:apple::421:google::570:facebook::424:uber::233\n",
      "amazon::356:apple::421:google::570:facebook::424:uber::233\n",
      "amazon::356:apple::421:google::570:facebook::424:uber::233\n",
      "amazon::356:apple::421:google::570:facebook::425:uber::233\n",
      "amazon::356:apple::421:google::570:facebook::426:uber::233\n",
      "amazon::356:apple::421:google::570:facebook::427:uber::233\n",
      "amazon::356:apple::421:google::570:facebook::428:uber::233\n",
      "amazon::356:apple::421:google::570:facebook::429:uber::233\n",
      "amazon::356:apple::421:google::570:facebook::430:uber::233\n",
      "amazon::356:apple::421:google::570:facebook::431:uber::233\n",
      "amazon::356:apple::421:google::570:facebook::432:uber::233\n",
      "amazon::356:apple::421:google::570:facebook::433:uber::233\n",
      "amazon::356:apple::421:google::570:facebook::434:uber::233\n",
      "amazon::356:apple::421:google::570:facebook::435:uber::233\n",
      "amazon::359:apple::427:google::600:facebook::450:uber::238\n",
      "!!ENDD!!!!\n"
     ]
    }
   ],
   "source": [
    "df_amazon = {}\n",
    "df_apple = {}\n",
    "df_google = {}\n",
    "df_facebook = {}\n",
    "df_uber = {}\n",
    "\n",
    "target_size = 250\n",
    "count_amz= 0\n",
    "count_app= 0\n",
    "count_ggl= 0\n",
    "count_fb= 0\n",
    "count_ub= 0\n",
    "\n",
    "\n",
    "domainlist = [\"https://techcrunch.com/2019/*\", \"https://techcrunch.com/2018/*\"]\n",
    "\n",
    "# list of available indices\n",
    "index = \"2019-13\"\n",
    "\n",
    "#\n",
    "# Searches the Common Crawl Index for a domain.\n",
    "#\n",
    "def search_domain(domainlist):\n",
    "\n",
    "    record_list = []\n",
    "    \n",
    "    \n",
    "    \n",
    "    for domain in domainlist:\n",
    "        \n",
    "        print \"[*] Trying target domain: %s\" % domain\n",
    "        \n",
    "        \n",
    "        cc_url  = \"http://index.commoncrawl.org/CC-MAIN-%s-index?\" % index\n",
    "        cc_url += \"url=%s&output=json\" % domain\n",
    "        \n",
    "#         cc_url  = \"https://index.commoncrawl.org/CC-MAIN-2019-13-index?url=https%3A%2F%2Ftechcrunch.com%2F2019%2F*&output=json\"\n",
    "        \n",
    "        response = requests.get(cc_url)\n",
    "        \n",
    "        if response.status_code == 200:\n",
    "            \n",
    "            records = response.content.splitlines()\n",
    "            \n",
    "            for record in records:\n",
    "                record_list.append(json.loads(record))\n",
    "            \n",
    "            print \"[*] Added %d results.\" % len(records)\n",
    "            \n",
    "    \n",
    "    print \"[*] Found a total of %d hits.\" % len(record_list)\n",
    "    \n",
    "    return record_list        \n",
    "\n",
    "#\n",
    "# Downloads a page from Common Crawl - adapted graciously from @Smerity - thanks man!\n",
    "# https://gist.github.com/Smerity/56bc6f21a8adec920ebf\n",
    "#\n",
    "def download_page(record):\n",
    "\n",
    "    offset, length = int(record['offset']), int(record['length'])\n",
    "    offset_end = offset + length - 1\n",
    "\n",
    "    # We'll get the file via HTTPS so we don't need to worry about S3 credentials\n",
    "    # Getting the file on S3 is equivalent however - you can request a Range\n",
    "    prefix = 'https://commoncrawl.s3.amazonaws.com/'\n",
    "    \n",
    "    # We can then use the Range header to ask for just this set of bytes\n",
    "    resp = requests.get(prefix + record['filename'], headers={'Range': 'bytes={}-{}'.format(offset, offset_end)})\n",
    "    \n",
    "    # The page is stored compressed (gzip) to save space\n",
    "    # We can extract it using the GZIP library\n",
    "    raw_data = StringIO.StringIO(resp.content)\n",
    "    f = gzip.GzipFile(fileobj=raw_data)\n",
    "    \n",
    "    # What we have now is just the WARC response, formatted:\n",
    "    data = f.read()\n",
    "    \n",
    "    response = \"\"\n",
    "    \n",
    "    if len(data):\n",
    "        try:\n",
    "            warc, header, response = data.strip().split('\\r\\n\\r\\n', 2)\n",
    "        except:\n",
    "            pass\n",
    "            \n",
    "    return response\n",
    "\n",
    "\n",
    "def extract_content(html_content,url):\n",
    "    \n",
    "    global count_amz,count_app, count_ggl, count_fb,count_ub\n",
    "    \n",
    "    url = url.rsplit('?',1)[0]\n",
    "    \n",
    "    if not url.startswith('https'):\n",
    "        return\n",
    "    \n",
    "    try:\n",
    "\n",
    "        parser = BeautifulSoup(html_content)\n",
    "\n",
    "        # kill all script and style elements\n",
    "#         for script in parser([\"script\", \"style\"]):\n",
    "#             script.decompose()\n",
    "\n",
    "\n",
    "        page_body = parser.find_all(\"div\", class_=\"article-content\")[0].get_text()\n",
    "        page_body = re.sub('\\s+', ' ', page_body).strip().lower()\n",
    "        \n",
    "        if 'moved permanently' in page_body:\n",
    "            return\n",
    "\n",
    "        if \"amazon\" in page_body:\n",
    "            df_amazon[url]= page_body\n",
    "            count_amz += 1\n",
    "#             print \"amazon::\"+ str(count_amz) + \":\" +url\n",
    "            \n",
    "        if \"apple\" in page_body:\n",
    "            df_apple[url]= page_body\n",
    "            count_app += 1\n",
    "#             print \"apple::\"+ str(count_app) + \":\" +url\n",
    "            \n",
    "        if \"google\" in page_body:\n",
    "            df_google[url]= page_body\n",
    "            count_ggl += 1\n",
    "#             print \"google::\"+ str(count_ggl) + \":\" +url\n",
    "            \n",
    "        if \"facebook\" in page_body:\n",
    "            df_facebook[url]= page_body\n",
    "            count_fb += 1\n",
    "#             print \"facebook::\"+ str(count_fb) + \":\" +url\n",
    "            \n",
    "        if \"uber\" in page_body:\n",
    "            df_uber[url]= page_body\n",
    "            count_ub += 1\n",
    "#             print \"uber::\"+ str(count_ub) + \":\" +url\n",
    "\n",
    "\n",
    "        if count_ggl%30 ==0:\n",
    "            print \"amazon::\"+ str(count_amz) + \":\" +\"apple::\"+ str(count_app) + \":\" +\"google::\"+ str(count_ggl) + \":\" +\"facebook::\"+ str(count_fb) + \":\" +\"uber::\"+ str(count_ub)\n",
    "            \n",
    "    except:\n",
    "        pass\n",
    "    \n",
    "    \n",
    "\n",
    "\n",
    "\n",
    "record_list = search_domain(domainlist)\n",
    "\n",
    "for record in record_list:\n",
    "    \n",
    "    html_content = download_page(record)\n",
    "    \n",
    "#     print \"[*] Retrieved %d bytes for %s\" % (len(html_content),record['url'])\n",
    "    \n",
    "    if len(html_content)>0:\n",
    "        \n",
    "        if count_amz <target_size or count_app <target_size  or count_ggl <target_size  or count_fb <target_size  or count_ub <target_size:\n",
    "            extract_content(html_content,record['url'])\n",
    "        else:\n",
    "            break\n",
    "            \n",
    "print '!!ENDD!!!!'\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 123,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_amz = pd.DataFrame.from_dict(df_amazon, orient='index')\n",
    "df_app = pd.DataFrame.from_dict(df_apple, orient='index')\n",
    "df_ggl = pd.DataFrame.from_dict(df_google, orient='index')\n",
    "df_fb = pd.DataFrame.from_dict(df_facebook, orient='index')\n",
    "df_ub = pd.DataFrame.from_dict(df_uber, orient='index')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 124,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_amz = df_amz.sample(n = 120)\n",
    "df_app = df_app.sample(n = 120)\n",
    "df_ggl = df_ggl.sample(n = 120)\n",
    "df_fb = df_fb.sample(n = 120)\n",
    "df_ub = df_ub.sample(n = 120)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 129,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_amz.to_csv('data_files/cc/amazon.csv', encoding='utf-8', mode='a', header=False, index = False)\n",
    "df_app.to_csv('data_files/cc/apple.csv', encoding='utf-8', mode='a', header=False, index = False)\n",
    "df_ggl.to_csv('data_files/cc/google.csv', encoding='utf-8', mode='a', header=False, index = False)\n",
    "df_fb.to_csv('data_files/cc/facebook.csv', encoding='utf-8', mode='a', header=False, index = False)\n",
    "df_ub.to_csv('data_files/cc/uber.csv', encoding='utf-8', mode='a', header=False, index = False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.15"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
